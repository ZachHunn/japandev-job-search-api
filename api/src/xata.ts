// Generated by Xata Codegen 0.21.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import dotenv from "dotenv";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

dotenv.config();

const xataApiKey = process.env.XATA_API_KEY;
const tables = [
  {
    name: "Jobs",
    columns: [
      { name: "jobTitle", type: "string" },
      { name: "jobId", type: "int", unique: true },
      { name: "companyName", type: "string" },
      { name: "companyLocation", type: "string" },
      { name: "skills", type: "string" },
      { name: "jobLocation", type: "string" },
      { name: "minSalary", type: "int" },
      { name: "maxSalary", type: "int" },
      { name: "applicationEmail", type: "string" },
      { name: "applicationUrl", type: "string" },
      { name: "postedDate", type: "string" },
      { name: "japaneseLevel", type: "string" },
      { name: "japaneseOnly", type: "bool" },
      { name: "remote", type: "string" },
      { name: "candidateLocation", type: "string" },
      { name: "internship", type: "bool" },
      { name: "published", type: "string" },
      { name: "updated", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Jobs = InferredTypes["Jobs"];
export type JobsRecord = Jobs & XataRecord;

export type DatabaseSchema = {
  Jobs: JobsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://ZachHunn-s-workspace-867elc.us-west-2.xata.sh/db/japan-dev",
  apiKey: xataApiKey,
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
